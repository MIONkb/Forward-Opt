
##
# TORCH.mlir and LINALG_TENSOR.mlir are generated from torchscript_linear.py
source ../../env.sh ### your path

#######################
# lower torch to tosa
#######################
torch-mlir-opt \
  --torch-simplification-pipeline \
  --torch-shape-refinement-pipeline\
  --torch-func-backend-type-conversion\
  --convert-torch-to-tosa \
  --torch-simplify-dtype-calculations \
  --torch-simplify-shape-calculations \
  --torch-finalizing-backend-type-conversion \
  --canonicalize --allow-unregistered-dialect\
  TORCH.mlir -o tosa.mlir 
 # --mlir-print-ir-after-all 2>&1 | cat > before_tosa_intermediate.mlir 

mlir-opt \
 --tosa-infer-shapes --tosa-validate --tosa-layerwise-constant-fold \
 --tosa-optional-decompositions --canonicalize --convert-elementwise-to-linalg\
  tosa.mlir -o tosa_opt.mlir 
 # --mlir-print-ir-after-all 2>&1 | cat > before_tosa_intermediate.mlir 

#######################
# If run quatization for this mlir
#######################
seperate_weights.py \
    --mlir tosa_opt.mlir \
    --modelname vit \
    --thread 1
torch-mlir-opt --mlir-elide-elementsattrs-if-larger=4 --canonicalize vit_simplified.mlir -o tosa_elided.mlir

run_calibration.py tosa_elided.mlir --dataset ../dataset/Cat/ \
 --weight_npz vit_origin_weight.npz

forward-opt tosa_elided.mlir\
 --forward-import-calibration-table \
 --forward-transform-to-quantized \
 -o tosa_quantized.mlir

mv tosa_quantized.mlir tosa_opt.mlir 
#######################
# quantization end
#######################


#######################
# transform matmul to function call
#######################
forward-opt -cse --forward-matmul-to-func tosa.mlir -o vit_outlined.mlir
generateMatmulAccel.py vit_outlined.mlir > MatmulAccelVIT.c

#######################
# lower tosa to linalg: this process needs a newer version of mlir-opt than:
# https://github.com/llvm/llvm-project/tree/4553dc46a05ec6f1e2aebcde1ce185772a26780b
#######################
mlir-opt  \
  --pass-pipeline="builtin.module(func.func(tosa-to-tensor,  tosa-to-arith, tosa-to-linalg-named, tosa-to-linalg))"\
  vit_outlined.mlir  -o linalg_tensor.mlir  \
  --mlir-print-ir-after-all 2>&1 | cat > before_linalg_intermediate.mlir  


#######################
# lower linalg
#######################
mlir-opt \
 --convert-tensor-to-linalg  -empty-tensor-to-alloc-tensor \
 --eliminate-empty-tensors  -linalg-bufferize \
 -buffer-results-to-out-params --cse --canonicalize \
 -linalg-generalize-named-ops \
 -arith-bufferize -func-bufferize  -tensor-bufferize \
 -convert-linalg-to-affine-loops -fold-memref-alias-ops --canonicalize \
 linalg_tensor.mlir -o affine.mlir

mlir-opt \
  -promote-buffers-to-stack --arith-expand --memref-expand  \
 -normalize-memrefs --expand-strided-metadata  -lower-affine \
 --scf-for-loop-canonicalization -convert-scf-to-cf \
 --convert-math-to-llvm --convert-math-to-libm \
 --convert-arith-to-llvm \
 --finalize-memref-to-llvm="use-opaque-pointers" \
 -convert-func-to-llvm=use-bare-ptr-memref-call-conv \
 --finalize-memref-to-llvm="use-opaque-pointers" \
 --cse --canonicalize \
 --reconcile-unrealized-casts \
 affine.mlir -o llvm.mlir

 mlir-translate llvm.mlir --mlir-to-llvmir -opaque-pointers=0 -o forward.ll
 opt -O3  forward.ll -S -o "forward_opt.ll"
#######################
# Now we get two files : forward_opt.ll(contains the model) and MatmulAccelVIT.c(contains the function call to .dll)
# following scripts runs towards win10-x86-mscv(visual studio)
# Please check ./onWin11 directory
#######################


